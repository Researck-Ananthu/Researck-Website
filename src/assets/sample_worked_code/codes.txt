"use client";

import React, { useState } from "react";
import Link from "next/link";
import Image from "next/image";
import { usePathname } from "next/navigation";
import { AnimatePresence, motion } from "framer-motion";

import HamburgerButton from "@/components/ui/buttons/HumbergerButton";
import { Button } from "@/components/ui/buttons/button";

import { cn } from "@/lib/utils";
import {
  headerLogos,
  headerNavList,
  headerButtonText,
} from "@/lib/constant";
import { MessageCircle } from "lucide-react";

const HeaderSection = () => {
  const [openNavigation, setOpenNavigation] = useState<boolean>(false);

  const toggleNavigation = () => {
    setOpenNavigation((prev) => !prev);
  };

  return (
    <>
      <header
        id="header"
        aria-label="Header"
        className="fixed inset-x-0 top-0 z-50 border-b border-[#ffffff1a] bg-[#0f0f0f]/70 backdrop-blur-sm transition-all duration-700"
      >
<div className="w-full flex h-16 items-center justify-between gap-4 px-6 md:px-8 xl:px-12 2xl:px-16 md:h-20">
          <CompanyLogo />
          <PcNavigation />
          <div className="flex items-center gap-4">
            <ChatButton />
            <HamburgerButton toggle={openNavigation} onClick={toggleNavigation} />
          </div>
        </div>
      </header>

      <MobileNavigation openNavigation={openNavigation} onClick={toggleNavigation} />
    </>
  );
};

export default HeaderSection;

const CompanyLogo = () => {
  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.95 }}
      className="w-28 md:w-36"
    >
      <Link href="#home" aria-label="company-logo">
        <Image
          src={headerLogos.src}
          alt={headerLogos.alt}
          width={100}
          height={40}
          loading="eager"
          priority
          className="w-full h-auto object-contain"
        />
      </Link>
    </motion.div>
  );
};

const PcNavigation = () => {
  const pathname = usePathname();

  return (
    <nav className="hidden xl:flex items-center gap-6 xl:gap-10 2xl:gap-10">
      {headerNavList
        .filter((item) => !item.onlyMobile)
        .map((item) => (
          <motion.div
            key={item.id}
            whileHover={{ y: -2 }}
            whileTap={{ scale: 0.98 }}
          >
            <Link
              href={item.href}
              className={cn(
                "text-sm 2xl:text-base font-medium uppercase tracking-wide text-[#c5c5c5] hover:text-white transition-colors duration-300",
                pathname === item.href && "text-white"
              )}
            >
              {item.title}
            </Link>
          </motion.div>
        ))}
    </nav>
  );
};

const ChatButton = () => {
  return (
    <motion.div
      whileHover={{ scale: 1.04 }}
      whileTap={{ scale: 0.95 }}
      className="hidden lg:block"
    >
      <Button
        variant="default"
        size="lg"
        className="rounded-full bg-gradient-to-r from-[#4e4e4e] to-[#2d2d2d] px-4 py-2 text-sm font-medium text-white hover:from-[#5e5e5e] hover:to-[#3a3a3a] transition-colors duration-300"
      >
        <MessageCircle className="w-4 h-4 mr-2" />
        {headerButtonText}
      </Button>
    </motion.div>
  );
};

const MobileNavigation = ({
  openNavigation,
  onClick,
}: {
  openNavigation: boolean;
  onClick?: React.MouseEventHandler<HTMLAnchorElement>;
}) => {
  return (
    <AnimatePresence>
      {openNavigation && (
        <motion.div
          initial={{ opacity: 0, y: "-100%" }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: "-100%" }}
          transition={{ duration: 0.4 }}
          className="fixed inset-0 z-40 bg-[#0f0f0f]/95 backdrop-blur-sm"
        >
          <div className="mt-20 flex flex-col items-center justify-center gap-8 text-white text-xl font-semibold">
            {headerNavList.map((item) => (
              <Link key={item.id} href={item.href} onClick={onClick}>
                {item.title}
              </Link>
            ))}
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};


// SimpleGridSection
import React from "react";
import { cn } from "@/lib/utils";
import { AttentionSeeker } from "react-awesome-reveal";

interface GridHeadingProps extends React.HTMLAttributes<HTMLDivElement> {
  whiteScheme: boolean;
  grid?: boolean;
  cover?: boolean;
  startText: string;
  highlightText: string;
  endText: string;
  classname?: string;
}

const SimpleGrid2: React.FC<GridHeadingProps> = ({
  whiteScheme = true,
  grid = false,
  cover = false,
  startText,
  highlightText,
  endText,
  classname,
  ...props
}) => {
  return (
    <div
  className={cn(
    "relative w-[95%] mx-auto max-w-7xl flex items-center justify-center py-9 md:py-13 px-6 mt-[-60px]",
    grid &&
      "bg-[url('/grid.svg')] bg-[length:35px_35px] bg-left-top bg-repeat",
    classname
  )}
  {...props}
>

      {/* Background Overlay with Edge Softening */}
      {grid && (
        <div className="absolute inset-0 z-0 pointer-events-none">
          <div
            className="absolute inset-0 bg-white"
            style={{
              maskImage:
                "radial-gradient(ellipse at center, transparent 15%, white 85%)",
              WebkitMaskImage:
                "radial-gradient(ellipse at center, transparent 15%, white 85%)",
            }}
          />
        </div>
      )}

      {/* Animated Heading */}
      <AttentionSeeker effect="tada" triggerOnce cascade>
        <h1 className="relative z-10 text-center text-4xl md:text-6xl lg:text-7xl font-extrabold uppercase bg-gradient-to-b from-neutral-700 to-black bg-clip-text text-transparent max-w-5xl leading-tight tracking-wide">
          {startText}
          <span className="inline-block bg-orange-400 text-white px-5 py-2 mx-2 rounded shadow">
            {highlightText}
          </span>
          {endText}
        </h1>
      </AttentionSeeker>
    </div>
  );
};

export default SimpleGrid2;

//SimpleParagraph


import React from "react";
import { Fade } from "react-awesome-reveal";
import { cn } from "@/lib/utils";

interface ParagraphProps extends React.HTMLAttributes<HTMLDivElement> {
  paragraph1: string;
  paragraph2: string;
  className?: string;
}

const SimplePara: React.FC<ParagraphProps> = ({
  paragraph1,
  paragraph2,
  className,
  ...props
}) => {
  return (
    <Fade triggerOnce={true} cascade={true}>
      <div className={cn("max-w-4xl lg:max-w-5xl xl:max-w-5xl mx-auto px-4 sm:px-6 text-center mt-12 mb-10",
            className)}
        {...props}>
        <p className="font-space text-base sm:text-lg font-normal leading-7 sm:leading-8 mb-5 text-justify-last-left text-gray-700">
          {paragraph1}
        </p>
        <p className="font-space text-base sm:text-lg font-normal leading-7 sm:leading-8 text-gray-700">
          {paragraph2}
        </p>
      </div>
    </Fade>
  );
};

export default SimplePara;


// LATEST HEADERSECTION

import React from "react";
import Image from "next/image";
import Link from "next/link";

import ThemeToggle from "@/components/ThemeToggle";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { researckBlackLogo, researckWhiteLogo } from "@/lib/imageAssets";

const HeaderSection = () => {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
<div className="mx-auto flex h-18 w-full max-w-none items-center justify-between px-4 sm:px-6 lg:px-8 xl:px-7 2xl:px-8">
        {/* Logo */}
        <Link href="/" className="inline-flex items-center gap-1">
          <Image
            src={researckBlackLogo}
            alt="Logo"
            width={32}
            height={32}
            className="h-14 w-auto object-cover dark:hidden"
          />
          <Image
            src={researckWhiteLogo}
            alt="Logo Dark"
            width={100}
            height={100}
            className="hidden h-14 w-auto object-cover dark:block"
          />
          <span className="hidden text-xl font-bold whitespace-nowrap sm:inline-block">
            ReSearck
          </span>
        </Link>

        {/* Navigation */}
        <nav className="hidden lg:flex gap-6">
          {["features", "pricing", "testimonials", "faq"].map((item) => (
            <Link
              key={item}
              href={`#${item}`}
              className="font-medium text-muted-foreground transition-colors hover:text-primary"
            >
              {item[0].toUpperCase() + item.slice(1)}
            </Link>
          ))}
        </nav>

        {/* Actions */}
        <div className="flex items-center gap-2">
          <Button variant="link" asChild>
            <Link href="/sign-in">Sign In</Link>
          </Button>
          <Button variant="outline" className="rounded-xl px-4 py-2 font-medium" asChild>
            <Link href="/onboarding">Get Started</Link>
          </Button>
          <ThemeToggle />
        </div>
      </div>
    </header>
  );
};

export default HeaderSection;

//HERO SECTION

import React from "react";

const HeroSection = () => {
  return (
    <section className="mys w-full min-h-screen bg-background text-foreground pt-10 pb-6 xl:pt-12 xl:pb-8 2xl:pt-14 2xl:pb-10">
      <div className="w-full max-w-[1920px] mx-auto px-6 md:px-12">
        <div className="grid grid-cols-1 lg:grid-cols-2">
          {/* Left Column */}
          <div className="flex flex-col justify-between h-full text-left self-start w-full pr-4 sm:pr-6 lg:pr-16 xl:pr-24 2xl:pr-32">
            <h1 className="text-3xl sm:text-4xl md:text-4xl lg:text-5xl font-extrabold leading-tight tracking-tight"  style={{ fontFamily: 'var(--font-source-code-pro)' }}>
              WE ARE GIVING <br />
              SOFTWARE <br />
              SOLUTIONS
            </h1>
            <p className="myt2 text-muted-foreground text-base sm:text-lg max-w-md mt-6 hidden md:block">
                Tell your expectations, we will make that happen in an economical budget
            </p>
          </div>

          {/* Right Column */}
          <div className="flex flex-col justify-between h-full text-right self-end w-full pl-4 sm:pl-6 lg:pl-16 xl:pl-24 2xl:pl-32 items-end">
            <div className="text-muted-foreground text-lg sm:text-xl font-medium hidden md:block">
              <p className="myt1">
                Expert in e-commerce application,<br />
                e-learning application,<br />
                healthcare application
              </p>
            </div>
            <h2 className="myh2 text-3xl sm:text-4xl md:text-4xl lg:text-5xl font-extrabold leading-tight mt-20 xl:mt-25 2xl:mt-100 tracking-tight" style={{ fontFamily: 'var(--font-source-code-pro)' }}>
              CREATING <br />
              TAILORED <br />
              MOBILE <br />
              APPLICATIONS
            </h2>
          </div>
        </div>
      </div>
    </section>
  );
};

export default HeroSection;


//PORTFOLIOSECTION


import React from "react";
import {
  portfolioHeading,
  portfolioParagraph,
  portfolioGridItems,
} from "@/lib/constant";
import Image from "next/image";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  // CardContent,
  CardFooter,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";

const PortfolioSection = () => {
  return (
    <section
      className="bg-muted/50 w-full py-16 md:py-20 lg:py-24 overflow-hidden text-foreground"
      id="Portfolio"
    >
      {/* Heading + Paragraph */}
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <div className="relative inline-block mx-auto mb-10 px-8 py-10">
          {/* Light Theme Grid */}
          <div
            className="absolute -inset-x-40 -inset-y-6 z-0 pointer-events-none rounded-lg block dark:hidden"
            style={{
              backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='60' height='60'%3E%3Cg fill='none' stroke='%23D1D5DB' stroke-width='1'%3E%3Cpath d='M60 0H0V60'/%3E%3Cpath d='M0 60H60V0'/%3E%3C/g%3E%3C/svg%3E")`,
              backgroundRepeat: "repeat",
              backgroundSize: "40px 40px",
              opacity: 4.9,
              maskImage:
                "linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%)",
              WebkitMaskImage:
                "linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%)",
            }}
          />
          {/* Dark Theme Grid */}
          <div
            className="absolute -inset-x-40 -inset-y-6 z-0 pointer-events-none rounded-lg hidden dark:block"
            style={{
              backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='60' height='60'%3E%3Cg fill='none' stroke='%23FFFFFF' stroke-width='1'%3E%3Cpath d='M60 0H0V60'/%3E%3Cpath d='M0 60H60V0'/%3E%3C/g%3E%3C/svg%3E")`,
              backgroundRepeat: "repeat",
              backgroundSize: "40px 40px",
              opacity: 0.4,
              maskImage:
                "linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%)",
              WebkitMaskImage:
                "linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%)",
            }}
          />
          {/* Headings and Paragraph Section */}
          <h2
            className="relative z-10 text-4xl sm:text-5xl md:text-6xl font-extrabold uppercase leading-tight tracking-tight"
            style={{ fontFamily: "var(--font-sora), sans-serif" }}
          >
            {portfolioHeading.headingStart}
            <br />
            <span className="relative inline-block">
              <span className="relative z-10 text-white dark:text-black px-2">
                {portfolioHeading.headingHighlight}
              </span>
              <span
                className="absolute inset-0 bg-orange-400 skew-x-2 z-0 shadow-md"
                aria-hidden="true"
              />
            </span>
            {portfolioHeading.headingEnd}
          </h2>
        </div>

        <p className="mt-6 text-gray-700 dark:text-muted-foreground text-base sm:text-md md:text-lg max-w-lg md:max-w-2xl lg:max-w-4xl mx-auto leading-relaxed tracking-tight text-justify-last-left">
          {portfolioParagraph.paragraphStart}
        </p>
        <p className="mt-4 text-gray-700 dark:text-muted-foreground text-base sm:text-md md:text-lg max-w-lg md:max-w-2xl lg:max-w-4xl mx-auto leading-relaxed tracking-tight">
          {portfolioParagraph.paragraphEnd}
        </p>
      </div>

      {/* Cards Displayed Section */}
      <div className="mt-16 w-full px-4 sm:px-6 lg:px-8">
        <div className="max-w-screen-3xl mx-auto">
          <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
            {portfolioGridItems.map((item, index) => ( // Fetching from constants
              <Card key={index} className="flex flex-col h-full">
                <CardHeader>
                  <div className="mb-2 flex items-center gap-2">
                    {item.icon}
                    <Badge variant="outline">{item.category}</Badge>
                  </div>

                  {item.image && (
                    <div className="mb-4">
                      <Image
                        src={item.image}
                        alt={item.title}
                        width={600}
                        height={400}
                        className="rounded-lg w-full h-56 2xl:h-75 object-cover"
                        style={{ objectPosition: "center" }}
                      />
                    </div>
                  )}

                  <CardTitle className="text-lg">{item.title}</CardTitle>
                  <CardDescription>{item.description}</CardDescription>
                </CardHeader>

                <CardFooter className="mt-auto">
                  <Button variant="outline" className="w-full cursor-pointer">
                    Learn More
                  </Button>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

export default PortfolioSection;





// WHATWE DO SECTION
import React from "react";
import { whatWeDoHeading, whatWeDoParagraph, whatWeDo } from "@/lib/constant";
import Image from "next/image";
import { Card } from "@/components/ui/card";
import { Tilt } from "@/components/motion-primitives/tilt";
import { Spotlight } from "@/components/motion-primitives/spotlight";
import { BorderTrail } from "@/components/motion-primitives/border-trail";

const WhatWeDoSection = () => {
  return (
    <section
      id="WhatWeDo"
      className="relative w-full py-16 md:py-20 lg:py-24 text-foreground bg-background dark:bg-black overflow-hidden"
    >
      {/* Grid Background Overlay */}
      <div
        className="absolute inset-0 pointer-events-none z-0"
        style={{
          backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='60' height='60'%3E%3Cg fill='none' stroke='%23FFFFFF' stroke-width='1'%3E%3Cpath d='M60 0H0V60'/%3E%3Cpath d='M0 60H60V0'/%3E%3C/g%3E%3C/svg%3E")`,
          backgroundRepeat: "repeat",
          backgroundSize: "40px 40px",
          opacity: 0.05,
        }}
      />

      <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        {/* Heading */}
        <h2 className="font-extrabold uppercase tracking-tight text-center leading-tight space-y-3">
          <div className="text-lg sm:text-2xl md:text-4xl lg:text-5xl xl:text-6xl break-words">
            {whatWeDoHeading.headingLines[0]}
          </div>
          <div className="text-lg sm:text-2xl md:text-4xl lg:text-5xl xl:text-6xl break-words">
            {whatWeDoHeading.headingLines[1]}
          </div>
          <div className="text-lg sm:text-2xl md:text-4xl lg:text-5xl xl:text-6xl break-words">
            {whatWeDoHeading.headingLines[2]}
          </div>
          <div className="text-xl sm:text-2xl md:text-4xl lg:text-5xl xl:text-6xl break-words flex flex-wrap justify-center items-center gap-2">
            <span className="inline-block px-4 py-3 bg-teal-600 text-black dark:text-white font-black rounded-md">
              {whatWeDoHeading.headingHighlight}
            </span>
            <span className="dark:text-white font-black align-middle">
              {whatWeDoHeading.headingEnd}
            </span>
          </div>
        </h2>

        {/* Paragraphs */}
        <p className="mt-10 text-muted-foreground text-base sm:text-md md:text-lg max-w-lg md:max-w-2xl lg:max-w-4xl mx-auto tracking-tight text-center text-justify-last-left">
          {whatWeDoParagraph.paragraphStart}
        </p>
        <p className="mt-4 text-muted-foreground text-base sm:text-md md:text-lg max-w-lg md:max-w-2xl lg:max-w-4xl mx-auto tracking-tight text-center">
          {whatWeDoParagraph.paragraphEnd}
        </p>
      </div>
      <div className="max-w-8xl mx-auto mt-20 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 px-4 sm:px-6 lg:px-8">
      {whatWeDo.map((item, index) => (
        <Tilt rotationFactor={8} key={index}>
          <Card className="relative flex flex-col overflow-hidden rounded-xl border border-black/20 p-6 bg-background/50 dark:border-white/20">
            <Spotlight
              className="bg-zinc-700 dark:bg-zinc-500 blur-2xl dark:blur-5xl"
              size={64}
              springOptions={{ bounce: 0.3, duration: 0.1 }}
            />
            <BorderTrail
              className="bg-linear-to-l from-blue-200 via-blue-500 to-blue-200 dark:from-blue-400 dark:via-blue-500 dark:to-blue-700"
              size={120}
            />
            <div className="relative z-10 mb-4 h-48 w-full overflow-hidden rounded-md">
              <Image
                src={item.image}
                alt={item.title}
                layout="fill"
                objectFit="cover"
                className="rounded-md"
              />
            </div>
            <h3 className="z-10 text-lg 2xl:text-xl font-bold mb-1 text-nowrap">{item.title}</h3>
            <p className="z-10 text-muted-foreground mb-3">{item.description}</p>
            <ul className="z-10 list-disc list-inside text-sm text-muted-foreground space-y-1">
              {item.points.map((point, i) => (
                <li key={i}>{point}</li>
              ))}
            </ul>
          </Card>
        </Tilt>
      ))}
            </div>
    </section>
  );
};

export default WhatWeDoSection;




//TypingLive Without Controls

"use client";

import { useEffect, useState } from "react";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { oneDark } from "react-syntax-highlighter/dist/esm/styles/prism";
import { sourceCode } from "@/lib/constant";

const TYPING_SPEED = 130;
const PAUSE_AFTER_COMPLETE = 2200;

const TypingCodeBlock = () => {
  const [displayedCode, setDisplayedCode] = useState("");
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    let timeout: NodeJS.Timeout;

    if (currentIndex < sourceCode.length) {
      timeout = setTimeout(() => {
        setDisplayedCode((prev) => prev + sourceCode[currentIndex]);
        setCurrentIndex((prev) => prev + 1);
      }, TYPING_SPEED);
    } else {
      timeout = setTimeout(() => {
        setDisplayedCode("");
        setCurrentIndex(0);
      }, PAUSE_AFTER_COMPLETE);
    }

    return () => clearTimeout(timeout);
  }, [currentIndex]);

  // Split the code into lines
  //   const lines = displayedCode.split("\n");

  return (
    <div className="w-full mt-20 px-4 sm:px-6 lg:px-8">
      <div className="bg-[#1e1e1e] dark:bg-gray-500 text-white rounded-xl overflow-hidden shadow-xl w-full max-w-5xl font-mono text-sm sm:text-base">
        {/* Mock Header */}
        <div className="bg-[#2d2d2d] dark:bg-gray-400 flex items-center justify-between px-4 py-2">
          {/* Left control dots */}
          <div className="flex items-center space-x-2">
            <span className="w-3 h-3 bg-red-500 rounded-full" />
            <span className="w-3 h-3 bg-yellow-500 rounded-full" />
            <span className="w-3 h-3 bg-green-500 rounded-full" />
          </div>

          {/* Right dummy icons */}
          <div className="flex items-center space-x-3 text-gray-400 dark:text-black text-sm select-none">
            <span className="hover:text-white cursor-default">_</span>
            <span className="hover:text-white cursor-default">▢</span>
            <span className="hover:text-white cursor-default">⧉</span>
          </div>
        </div>

        {/* Code Block with Syntax Highlighting */}
        <div className="p-4 overflow-x-auto">
          <SyntaxHighlighter
            language="typescript"
            style={oneDark}
            showLineNumbers
            customStyle={{
              background: "transparent",
              padding: 0,
              margin: 0,
            }}
            lineNumberStyle={{ color: "#999" }}
          >
            {displayedCode + (currentIndex < sourceCode.length ? "➡️" : "")}
          </SyntaxHighlighter>
        </div>
      </div>
    </div>
  );
};

export default TypingCodeBlock;


// AboutUsSection

import React from "react";
import {
  aboutUsHeading,
  aboutUsParagraph,
  buttonStart,
  buttonExplore,
} from "@/lib/constant";
import Image from "next/image";
import TypingCodeBlock from "@/components/ui/TypingCodeBlock";

const AboutUsSection = () => {
  return (
    <section
      className="bg-muted/50 w-full py-16 md:py-20 lg:py-24 overflow-hidden text-foreground"
      id="About"
    >
      {/* Heading + Paragraph */}
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <div className="relative inline-block mx-auto mb-10 px-8 py-10">
          {/* Light Grid Background */}
          <div
            className="absolute -inset-x-40 -inset-y-6 z-0 pointer-events-none rounded-lg block dark:hidden"
            style={{
              backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='60' height='60'%3E%3Cg fill='none' stroke='%23D1D5DB' stroke-width='1'%3E%3Cpath d='M60 0H0V60'/%3E%3Cpath d='M0 60H60V0'/%3E%3C/g%3E%3C/svg%3E")`,
              backgroundRepeat: "repeat",
              backgroundSize: "38px 38px",
              opacity: 4.5,
              maskImage:
                "linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%)",
              WebkitMaskImage:
                "linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%)",
            }}
          />

          {/* Dark Grid Background */}
          <div
            className="absolute -inset-x-40 -inset-y-6 z-0 pointer-events-none rounded-lg hidden dark:block"
            style={{
              backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='60' height='60'%3E%3Cg fill='none' stroke='%23FFFFFF' stroke-width='1'%3E%3Cpath d='M60 0H0V60'/%3E%3Cpath d='M0 60H60V0'/%3E%3C/g%3E%3C/svg%3E")`,
              backgroundRepeat: "repeat",
              backgroundSize: "40px 40px",
              opacity: 0.2,
              maskImage:
                "linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%)",
              WebkitMaskImage:
                "linear-gradient(to right, transparent 0%, black 20%, black 80%, transparent 100%)",
            }}
          />

          {/* Heading */}
          <h2
            className="relative z-10 text-2xl sm:text-5xl md:text-6xl font-extrabold uppercase leading-tight tracking-tight"
            style={{ fontFamily: "var(--font-sora), sans-serif" }}
          >
            {aboutUsHeading.headingStart}
            <br />
            <span className="relative inline-block">
              <span className="relative z-10 text-white dark:text-black px-2">
                {aboutUsHeading.headingHighlight}
              </span>
              <span
                className="absolute inset-0 bg-orange-400 skew-x-2 z-0 shadow-md"
                aria-hidden="true"
              />
            </span>
            {aboutUsHeading.headingEnd}
          </h2>
        </div>

        {/* Paragraphs */}
        <p className="mt-6 text-gray-700 dark:text-muted-foreground text-base sm:text-md md:text-lg max-w-lg md:max-w-2xl lg:max-w-4xl mx-auto leading-relaxed tracking-tight text-justify-last-left">
          {aboutUsParagraph.paragraphStart}
        </p>
        <p className="mt-4 text-gray-700 dark:text-muted-foreground text-base sm:text-md md:text-lg max-w-lg md:max-w-2xl lg:max-w-4xl mx-auto leading-relaxed tracking-tight">
          {aboutUsParagraph.paragraphEnd}
        </p>

        {/* Buttons */}
        <div className="mt-10 flex justify-center gap-8 flex-wrap">
          {/* Get Started */}
          <button className="relative group bg-black dark:bg-white text-white dark:text-black font-semibold px-6 py-3 rounded-lg shadow-md transition-all duration-300 ease-in-out transform hover:scale-105 cursor-pointer">
            <span className="absolute -bottom-1 -right-1 w-full h-full bg-green-600 dark:bg-green-400 rounded-lg z-[-1] group-hover:translate-x-1 group-hover:translate-y-1 transition-transform duration-300"></span>
            {buttonStart.text}
          </button>
          {/* Explore */}
          <button className="relative group bg-white dark:bg-black border-1 border-gray-400 dark:border-gray-800 text-black dark:text-white font-semibold px-6 py-3 rounded-lg shadow-md flex items-center gap-2 transition-all duration-300 ease-in-out transform hover:scale-105 cursor-pointer">
            <span className="absolute -bottom-1 -right-1 w-full h-full bg-green-600 dark:bg-green-400 rounded-lg z-[-1] group-hover:translate-y-1 group-hover:translate-x-1 transition-transform duration-300"></span>
            <Image
              src={buttonExplore.icon}
              alt={buttonExplore.alt}
              width={20}
              height={20}
            />
            {buttonExplore.text}
          </button>
        </div>
        {/* Live Typing Code Block */}
        <TypingCodeBlock />

      </div>
    </section>
  );
};

export default AboutUsSection;


//FocusHighlights - Manual Hovering Final Code

"use client";

import { focuses } from "@/lib/constant";
import Image from "next/image";
import { motion } from "framer-motion";
import Tilt from "react-parallax-tilt";
import "./FocusHighlights.css";

const FocusHighlights = () => {
  return (
    <section className="w-full py-24 px-4 overflow-hidden">
      <div className="max-w-screen-xl mx-auto grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 xl:grid-cols-4 gap-10">
        {focuses.map((focus, i) => (
          <motion.div
            key={focus.title}
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ delay: i * 0.2, duration: 0.6, ease: "easeOut" }}
            viewport={{ once: true }}
          >
            {/* <Tilt tiltMaxAngleX={6} tiltMaxAngleY={6} scale={1.02}>
              <div className="flip-card group perspective"> */}
            <Tilt tiltMaxAngleX={6} tiltMaxAngleY={6} scale={1.02}>
              <div className="glow-wrapper group flip-card perspective">
                <div className="flip-card-inner group-hover:rotate-y-180">
                  {/* Front */}
                  <div className="flip-card-front bg-card text-white shadow-lg rounded-2xl overflow-hidden relative">
                    <Image
                      src={focus.image}
                      alt={focus.title}
                      fill
                      className="object-cover opacity-80"
                    />
                    <div className="absolute inset-0 bg-black/50 flex flex-col items-center justify-center p-6">
                      <h3 className="text-xl sm:text-2xl font-bold mb-2">
                        {focus.title}
                      </h3>
                    </div>
                  </div>

                  {/* Back */}
                  <div className="flip-card-back text-white rounded-2xl shadow-xl overflow-hidden relative">
                    <Image
                      src={focus.flip_image}
                      alt={`${focus.title} back`}
                      fill
                      className="object-cover"
                    />
                    <div className="absolute inset-0 bg-black/60 flex items-center justify-center text-center p-6">
                      <p className="text-sm sm:text-base leading-relaxed">
                        {focus.description}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </Tilt>
          </motion.div>
        ))}
      </div>
    </section>
  );
};

export default FocusHighlights;

// WITH AUTO HOVERING EFFECTS

"use client";

import { useEffect, useState } from "react";
import { focuses } from "@/lib/constant";
import Image from "next/image";
import { motion } from "framer-motion";
import Tilt from "react-parallax-tilt";
import "./FocusHighlights.css";

const FocusHighlights = () => {
  const [flippedIndexes, setFlippedIndexes] = useState<number[]>([]);

  useEffect(() => {
    const interval = setInterval(() => {
      setFlippedIndexes((prev) =>
        focuses.map((_, idx) => (prev.includes(idx) ? -1 : idx))
      );
    }, 3000); // Change interval time here (ms)

    return () => clearInterval(interval);
  }, []);

  const isFlipped = (index: number) => flippedIndexes.includes(index);

  return (
    <section className="w-full py-24 px-4 overflow-hidden">
      <div className="max-w-screen-xl mx-auto grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 xl:grid-cols-4 gap-10">
        {focuses.map((focus, i) => (
          <motion.div
            key={focus.title}
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ delay: i * 0.2, duration: 0.6, ease: "easeOut" }}
            viewport={{ once: true }}
          >
            <Tilt tiltMaxAngleX={6} tiltMaxAngleY={6} scale={1.02}>
              <div className="glow-wrapper group flip-card perspective">
                <div
                  className={`flip-card-inner transition-transform duration-[1200ms] ${
                    isFlipped(i) ? "rotate-y-180" : ""
                  } group-hover:rotate-y-180`}
                >
                  {/* Front */}
                  <div className="flip-card-front bg-card text-white shadow-lg rounded-2xl overflow-hidden relative">
                    <Image
                      src={focus.image}
                      alt={focus.title}
                      fill
                      className="object-cover opacity-80"
                    />
                    <div className="absolute inset-0 bg-black/50 flex flex-col items-center justify-center p-6">
                      <h3 className="text-xl sm:text-2xl font-bold mb-2">
                        {focus.title}
                      </h3>
                    </div>
                  </div>

                  {/* Back */}
                  <div className="flip-card-back text-white rounded-2xl shadow-xl overflow-hidden relative">
                    <Image
                      src={focus.flip_image}
                      alt={`${focus.title} back`}
                      fill
                      className="object-cover"
                    />
                    <div className="absolute inset-0 bg-black/60 flex items-center justify-center text-center p-6">
                      <p className="text-sm sm:text-base leading-relaxed">
                        {focus.description}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </Tilt>
          </motion.div>
        ))}
      </div>
    </section>
  );
};

export default FocusHighlights;


